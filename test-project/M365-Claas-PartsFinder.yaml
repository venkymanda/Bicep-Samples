name: M365Partsfinder_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
- None
 

pool:
  vmImage: windows-latest

parameters:
  - name: M365Partsfinder Environment
    type: string
    displayName: "M365Partsfinder Environment"
    values:
        - Dev
        - Test
        - Prod
  - name: StorageKey
    type: string
    displayName: "Storage account key"

  - name: appid
    type: string
    displayName: "appid"

  - name: appSecret 
    type: string
    displayName: "appsecret"

  - name: tenent
    type: string
    displayName: "tenent"

  - name: resourceNames
    type: object
    displayName: "resourceNames"
    default: []
    values:
    - 'partsfinderstorageapi'
    - 'partsfinderservicebusapi'
    - 'partsfinderdynamicsapi'
    - 'partsFinderReceiveConnLogicapp'

variables:
  - name: deploymentDefaultLocation
    value: westeurope

stages:

- stage: Lint
  jobs:
  - job: LintCode
    displayName: Lint code
    steps:
        - task: AzureCLI@2
          displayName: ' Run Bicep linter'
          inputs:
            azureSubscription: '<Subscription Name>'
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: 'az bicep build --file Modules/Storage/storageaccount.bicep'
            workingDirectory: '$(System.DefaultWorkingDirectory)/_AIS-Infrastructure/Bicep/'

- stage: Validate
  jobs:
  - job: ValidateBicepCode
    displayName: Validate Bicep code
    steps:
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Validate Bicep File'
        inputs:
          azureResourceManagerConnection: '<service connection name>'
          subscriptionId: '<subscription id>'
          resourceGroupName: '<resourcegroup name>'
          location: '<location>'
          csmFile: '$(System.DefaultWorkingDirectory)/_AIS-Infrastructure/Bicep/Modules/Storage/storageaccount.bicep' # path to Bicep file
          overrideParameters: '-Environment "Dev" -StorageAccountName "M365Storage"'
          deploymentMode: Validation

- stage: Preview
  jobs:
  - job: PreviewAzureChanges
    displayName: Preview Azure changes
    variables:
      ResourceGroupName: '<resourcegroup name>'
    
    steps:
    - task: AzureCLI@2
      displayName: 'Azure CLI '
      inputs:
        azureSubscription: '<Subscription Name>'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: 'az deployment group what-if --resource-group $(ResourceGroupName) --template-file Modules/Storage/storageaccount.bicep --parameters Environment=''Dev'' StorageAccountName=''M365Storage'''
        workingDirectory: '$(System.DefaultWorkingDirectory)/_AIS-Infrastructure/Bicep/'

- stage: Deploy
  jobs:
  - deployment: DeployWebsite
    displayName: Deploy website
    environment: Website
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzureResourceManagerTemplateDeployment@3
              name: DeployBicepFile
              displayName: Deploy Bicep file
              inputs:
                connectedServiceName: $(ServiceConnectionName)
                deploymentName: $(Build.BuildNumber)
                location: $(deploymentDefaultLocation)
                resourceGroupName: $(ResourceGroupName)
                csmFile: deploy/main.bicep
                overrideParameters: >
                  -environmentType $(EnvironmentType)
                deploymentOutputs: deploymentOutputs

            - bash: |
                echo "##vso[task.setvariable variable=appServiceAppHostName;isOutput=true]$(echo $DEPLOYMENT_OUTPUTS | jq -r '.appServiceAppHostName.value')"
              name: SaveDeploymentOutputs
              displayName: Save deployment outputs into variables
              env:
                DEPLOYMENT_OUTPUTS: $(deploymentOutputs)

- stage: SmokeTest
  jobs:
  - job: SmokeTest
    displayName: Smoke test
    variables:
      appServiceAppHostName: $[ stageDependencies.Deploy.DeployWebsite.outputs['DeployWebsite.SaveDeploymentOutputs.appServiceAppHostName'] ]
    steps:
      - task: PowerShell@2
        name: RunSmokeTests
        displayName: Run smoke tests
        inputs:
          targetType: inline
          script: |
            $container = New-PesterContainer `
              -Path 'deploy/Website.Tests.ps1' `
              -Data @{ HostName = '$(appServiceAppHostName)' }
            Invoke-Pester `
              -Container $container `
              -CI

      - task: PublishTestResults@2
        name: PublishTestResults
        displayName: Publish test results
        condition: always()
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: 'testResults.xml'